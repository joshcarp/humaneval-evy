func separate_paren_groups:[]string paren_string:string
    result:[]string
        current_string:string
        current_depth:num
        current_depth = 0
    
        for c := range (len paren_string)
            if paren_string[c] == "("
                current_depth = current_depth + 1
                current_string = current_string + paren_string[c]
            else if paren_string[c] == ")"
                current_depth = current_depth - 1
                current_string = current_string + paren_string[c]
    
                if current_depth == 0
                    result = result + [current_string]
                    current_string = ""
                end
            end
        end
    
        return result
end
func check
    assert ["(()())" "((()))" "()" "((())()())"] (separate_paren_groups "(()()) ((())) () ((())()())")
    assert ["()" "(())" "((()))" "(((())))"] (separate_paren_groups "() (()) ((())) (((())))")
    assert ["(()(())((())))"] (separate_paren_groups "(()(())((())))")
    assert ["()" "(())" "(()())"] (separate_paren_groups "( ) (( )) (( )( ))")
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
