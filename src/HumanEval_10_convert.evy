func is_palindrome:bool string:string
    //" Test if given string is a palindrome "
    return string_ == string_[0:]

end
func make_palindrome:string string:string
    //" Find the shortest palindrome that begins with a supplied string.
    //    Algorithm idea is simple:
    //    - Find the longest postfix of supplied string that is a palindrome.
    //    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    //    >>> make_palindrome('')
    //    ''
    //    >>> make_palindrome('cat')
    //    'catac'
    //    >>> make_palindrome('cata')
    //    'catac'
    //    "
    if !string_
        return ""
    end
    beginning_of_suffix := 0
    while !.is_palindrome (string_[beginning_of_suffix:])
        beginning_of_suffix = beginning_of_suffix + 1
    end
    return string_ + string_[0:beginning_of_suffix][0:]

end
METADATA := {"author":"jt" "dataset":"test"}
func checkcandidate
    assert .candidate ("") == ""
    assert .candidate ("x") == "x"
    assert .candidate ("xyz") == "xyzyx"
    assert .candidate ("xyx") == "xyx"
    assert .candidate ("jerry") == "jerryrrej"

end
.check (make_palindrome)