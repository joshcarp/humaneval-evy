func separate_paren_groups:[]string paren_string:string
    //" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    //    separate those group into separate strings and return the list of those.
    //    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    //    Ignore any spaces in the input string.
    //    >>> separate_paren_groups('( ) (( )) (( )( ))')
    //    ['()', '(())', '(()())']
    //    "
    result := []
    current_string := []
    current_depth := 0
    for c := range paren_string
        if c == "("
            current_depth = current_depth + 1
            current_string = current_string + [c]
        else if c == ")"
            current_depth = current_depth - 1
            current_string = current_string + [c]
            if current_depth == 0
                result = result + [(join current_string "")]
                current_string = []
            end
        else
            if c == ")"
                current_depth = current_depth - 1
                current_string = current_string + [c]
                if current_depth == 0
                    result = result + [(join current_string "")]
                    current_string = []
                end
            end
        end
    end
    return result

end
METADATA := {"author":"jt" "dataset":"test"}
func checkcandidate
    assert .candidate ("(()()) ((())) () ((())()())") == ["(()())" "((()))" "()" "((())()())" ]
    assert .candidate ("() (()) ((())) (((())))") == ["()" "(())" "((()))" "(((())))" ]
    assert .candidate ("(()(())((())))") == ["(()(())((())))" ]
    assert .candidate ("( ) (( )) (( )( ))") == ["()" "(())" "(()())" ]

end
.check (separate_paren_groups)