func is_palindrome:bool str:string
    return str == (reverse str)
end
func make_palindrome:string str:string
    if str == ""
        return ""
    end
    beginning_of_suffix := 0
    while !(is_palindrome str[beginning_of_suffix:])
        beginning_of_suffix = beginning_of_suffix + 1
    end
    return str + (reverse str[:beginning_of_suffix])
end
func reverse:string str:string
    reversed := ""
    for i := range(len str)
        reversed = str[i] + reversed
    end
    return reversed
end
func check
    assert "" (make_palindrome "")
    assert "x" (make_palindrome "x")
    assert "xyzyx" (make_palindrome "xyz")
    assert "xyx" (make_palindrome "xyx")
    assert "jerryrrej" (make_palindrome "jerry")
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if (sprintf "%v" want) != (sprintf "%v" got)
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
