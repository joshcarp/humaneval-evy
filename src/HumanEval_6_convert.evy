func parse_nested_parens:[]int paren_string:string
    //" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    //    For each of the group, output the deepest level of nesting of parentheses.
    //    E.g. (()()) has maximum two levels of nesting while ((())) has three.
    //
    //    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    //    [2, 3, 1, 3]
    //    "
    func parse_paren_groups
        depth := 0
        max_depth := 0
            if c == "("
                depth = depth + 1
                max_depth = .max (depth max_depth)
                1
            else
                depth = depth - 1
            end
        end
        return max_depth
    
    end
    return __evy_listcomp_ := []
    for x := paren_string.split (" "):
    if x

end
METADATA := {"author":"jt" "dataset":"test"}
func checkcandidate
    assert .candidate ("(()()) ((())) () ((())()())") == [2 3 1 3 ]
    assert .candidate ("() (()) ((())) (((())))") == [1 2 3 4 ]
    assert .candidate ("(()(())((())))") == [4 ]

end
.check (parse_nested_parens)