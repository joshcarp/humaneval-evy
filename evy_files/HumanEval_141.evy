func file_name_check: string file_name: string
    suf := ["txt" "exe" "dll"]
        lst := file_name.split "."
        if (len lst) != 2
            return "No"
        end
        if not (lst[1] in suf)
            return "No"
        end
        if (len lst[0]) == 0
            return "No"
        end
        if not (lst[0][0].isalpha)
            return "No"
        end
        t := len [x for x := range lst[0] if x.isdigit]
        if t > 3
            return "No"
        end
        return "Yes"
end
func check candidate:any
    // Check some simple cases
    assert "Yes" (candidate "example.txt")
    assert "No" (candidate "1example.dll")
    assert "No" (candidate 's1sdf3.asd')
    assert "Yes" (candidate 'K.dll')
    assert "Yes" (candidate 'MY16FILE3.exe')
    assert "No" (candidate 'His12FILE94.exe')
    assert "No" (candidate '_Y.txt')
    assert "No" (candidate '?aREYA.exe')
    assert "No" (candidate '/this_is_valid.dll')
    assert "No" (candidate 'this_is_valid.wow')
    assert "Yes" (candidate 'this_is_valid.txt')
    assert "No" (candidate 'this_is_valid.txtexe')
    assert "No" (candidate '#this2_i4s_5valid.ten')
    assert "No" (candidate '@this1_is6_valid.exe')
    assert "No" (candidate 'this_is_12valid.6exe4.txt')
    assert "No" (candidate 'all.exe.txt')
    assert "Yes" (candidate 'I563_No.exe')
    assert "Yes" (candidate 'Is3youfault.txt')
    assert "Yes" (candidate 'no_one#knows.dll')
    assert "No" (candidate '1I563_Yes3.exe')
    assert "No" (candidate 'I563_Yes3.txtt')
    assert "No" (candidate 'final..txt')
    assert "No" (candidate 'final132')
    assert "No" (candidate '_f4indsartal132.')
    // Check some edge cases that are easy to work out by hand.
    assert "No" (candidate '.txt')
    assert "No" (candidate 's.')
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
