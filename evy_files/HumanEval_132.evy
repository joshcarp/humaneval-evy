func is_nested:string s:string
    opening_bracket_index:[]num
    closing_bracket_index:[]num
    for i := range (len s)
        if s[i] == '['
            opening_bracket_index = opening_bracket_index + [i]
        else
            closing_bracket_index = closing_bracket_index + [i]
        end
    end
    closing_bracket_index = reverse closing_bracket_index
    cnt := 0
    i := 0
    l := len closing_bracket_index
    for idx := range opening_bracket_index
        if i < l and idx < closing_bracket_index[i]
            cnt = cnt + 1
            i = i + 1
        end
    end
    return cnt >= 2
end
func check:bool candidate:func
    assert true (candidate '[[]]')
    assert false (candidate '[]]]]]]][[[[[]')
    assert false (candidate '[][]')
    assert false (candidate '[]')
    assert true (candidate '[[[[]]]]')
    assert false (candidate '[]]]]]]]]]]')
    assert true (candidate '[][][[]]')
    assert false (candidate '[[]')
    assert false (candidate '[]]')
    assert true (candidate '[[]][[')
    assert true (candidate '[[][]]')
    assert false (candidate '')
    assert false (candidate '[[[[[[[[')
    assert false (candidate ']]]]]]]]')
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
