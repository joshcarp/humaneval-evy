func uniqueDigits:[]num x:[]num
    oddDigitElements:[]num
        for i := range x
            allOdd := true
            for c := range (sprintf "%v" x[i])
                if (c.(string)[0] - '0') % 2 == 0
                    allOdd = false
                    break
                end
            end
            if allOdd
                oddDigitElements = oddDigitElements + [x[i]]
            end
        end
        sort oddDigitElements
        return oddDigitElements
end
func check
    fails := 0
    total := 0

    func assert want:any got:any
        total = total + 1
        if want != got
            fails = fails + 1
            printf "want != got: want %v got %v\n" want got
        end
    end

    assert [1 15 33] (uniqueDigits [15 33 1422 1])
    assert [] (uniqueDigits [152 323 1422 10])
    assert [111 151] (uniqueDigits [12345 2033 111 151])
    assert [31 135] (uniqueDigits [135 103 31])

    if fails == 0
        print "All tests passed!"
    else
        printf "%v of %v tests passed\n" (total - fails) total
    end
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
