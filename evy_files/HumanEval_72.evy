func will_it_fly:bool q:[]num w:num
    if (sum q) > w
        return false
    end
    i := 0
    j := len q - 1
    while i < j
        if q[i] != q[j]
            return false
        end
        i = i + 1
        j = j - 1
    end
    return true
    end
end
func check
    fails := 0
total := 0
func assert want:any got:any
total = total + 1
if want != got
fails = fails + 1
printf "want != got: want %v got %v\n" want got
end
end
assert true (will_it_fly [3 2 3] 9)
assert false (will_it_fly [1 2] 5)
assert true (will_it_fly [3] 5)
assert false (will_it_fly [3 2 3] 1)
assert false (will_it_fly [1 2 3] 6)
assert true (will_it_fly [5] 5)
printf "%v of %v tests passed\n" (total - fails) total
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
