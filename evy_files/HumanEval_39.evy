func prime_fib:num n:num
    func is_prime:bool p:num
        if p < 2
            return false
        end
        for k := range 2 (sqrt p) + 1
            if p % k == 0
                return false
            end
        end
        return true
    end
    
    f:[]num
    f = [0 1]
    while true
        f = f + [f[-1] + f[-2]]
        if is_prime f[-1]
            n = n - 1
        end
        if n == 0
            return f[-1]
        end
    end
end
func check
    fails := 0
    total := 0

    func assert want:any got:any
        total = total + 1
        if want != got
            fails = fails + 1
            printf "want != got: want %v got %v\n" want got
        end
    end

    assert 2 (prime_fib 1)
    assert 3 (prime_fib 2)
    assert 5 (prime_fib 3)
    assert 13 (prime_fib 4)
    assert 89 (prime_fib 5)
    assert 233 (prime_fib 6)
    assert 1597 (prime_fib 7)
    assert 28657 (prime_fib 8)
    assert 514229 (prime_fib 9)
    assert 433494437 (prime_fib 10)

    printf "%v of %v tests passed\n" (total - fails) total
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
