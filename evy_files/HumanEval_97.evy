func multiply:num a:num b:num
    return abs a % 10 * abs b % 10
end
func check
candidate:any

// Check some simple cases
assert 16 (candidate 148 412) // "First test error: " + (candidate 148 412)
assert 72 (candidate 19 28) // "Second test error: " + (candidate 19 28)
assert 0 (candidate 2020 1851) // "Third test error: " + (candidate 2020 1851)
assert 20 (candidate 14 -15) // "Fourth test error: " + (candidate 14 -15)
assert 42 (candidate 76 67) // "Fifth test error: " + (candidate 76 67)
assert 49 (candidate 17 27) // "Sixth test error: " + (candidate 17 27)

// Check some edge cases that are easy to work out by hand.
assert 0 (candidate 0 1) // "1st edge test error: " + (candidate 0 1)
assert 0 (candidate 0 0) // "2nd edge test error: " + (candidate 0 0)
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
