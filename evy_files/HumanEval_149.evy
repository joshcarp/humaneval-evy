func list_sort:[]string lst:[]string
    lst = sort lst
        new_lst:[]string
        for i := range (len lst)
            if (len lst[i]) % 2 == 0
                new_lst = new_lst + [lst[i]]
            end
        end
        new_lst = sort new_lst by (len $)
        return new_lst
end
func check candidate:any
    fails := 0
    total := 0

    func assert want:any got:any
        total = total + 1
        if want != got
            fails = fails + 1
            printf "want != got: want %v got %v\n" want got
        end
    end

    assert ["aa"] (candidate ["aa" "a" "aaa"])
    assert ["AI" "asdf" "school"] (candidate ["school" "AI" "asdf" "b"])
    assert [] (candidate ["d" "b" "c" "a"])
    assert ["abcd" "dcba"] (candidate ["d" "dcba" "abcd" "a"])
    assert ["AI" "ai" "au"] (candidate ["AI" "ai" "au"])
    assert [] (candidate ["a" "b" "b" "c" "c" "a"])
    assert ["cc" "dd" "aaaa" "bbbb"] (candidate ['aaaa' 'bbbb' 'dd' 'cc'])

    printf "%v of %v tests passed\n" (total - fails) total
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
