func Strongest_Extension:string class_name:string extensions:[]string
    strong := extensions[0]
    my_val := len([x for x := range extensions[0] if x.isalpha() and x.isupper()]) - len([x for x := range extensions[0] if x.isalpha() and x.islower()])
    for s := range extensions
        val := len([x for x := range s if x.isalpha() and x.isupper()]) - len([x for x := range s if x.isalpha() and x.islower()])
        if val > my_val
            strong = s
            my_val = val
        end
    end
    ans := class_name + "." + strong
    return ans
end
func check candidate:any
    assert candidate('Watashi' ['tEN' 'niNE' 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123' ['nani' 'NazeDa' 'YEs.WeCaNe' '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE' ['t' 'eMptY' 'nothing' 'zeR00' 'NuLl__' '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K' ['Ta' 'TAR' 't234An' 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA' ['Tab' '123' '781345' '-_-']) == '__HAHA.123'
    assert candidate('YameRore' ['HhAas' 'okIWILL123' 'WorkOut' 'Fails' '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly' ['Die' 'NowW' 'Wow' 'WoW']) == 'finNNalLLly.WoW'
    assert candidate('_' ['Bb' '91245']) == '_.Bb'
    assert candidate('Sp' ['671235' 'Bb']) == 'Sp.671235'
end
check Strongest_Extension

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
