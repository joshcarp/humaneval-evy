func solution:num lst:[]num
    return sum [x for idx := range (len lst) if idx % 2 == 0 and lst[idx] % 2 == 1]
end
func check
    fails := 0
    total := 0
    func assert want:any got:any
        total = total + 1
        if want != got
            fails = fails + 1
            printf "want != got: want %v got %v\n" want got
        end
    end
    assert 12 (solution [5 8 7 1])
    assert 9 (solution [3 3 3 3 3])
    assert 0 (solution [30 13 24 321])
    assert 5 (solution [5 9])
    assert 0 (solution [2 4 8])
    assert 23 (solution [30 13 23 32])
    assert 3 (solution [3 13 2 9])
    printf "%v of %v tests passed\n" (total - fails) total
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
