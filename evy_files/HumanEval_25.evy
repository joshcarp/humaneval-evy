func factorize:[]num n:num
    fact:[]num
    i := 2
    while i <= (sqrt n) + 1
        if n % i == 0
            fact = fact + [i]
            n = n // i
        else
            i = i + 1
        end
    end
    
    if n > 1
        fact = fact + [n]
    end
    return fact
end
func check
    fails := 0
    total := 0

    func assert want:any got:any
        total = total + 1
        if want != got
            fails = fails + 1
            printf "want != got: want %v got %v\n" want got
        end
    end

    assert [2] (factorize 2)
    assert [2 2] (factorize 4)
    assert [2 2 2] (factorize 8)
    assert [3 19] (factorize (3 * 19))
    assert [3 3 19 19] (factorize (3 * 19 * 3 * 19))
    assert [3 3 3 19 19 19] (factorize (3 * 19 * 3 * 19 * 3 * 19))
    assert [3 19 19 19] (factorize (3 * 19 * 19 * 19))
    assert [2 3 3] (factorize (3 * 2 * 3))

    printf "%v of %v tests passed\n" (total - fails) total
end
check

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
