func valid_date:date_valid s:string
    date_valid := false
        try
            parts:[]string
            parts = s.split "-"
            if len parts != 3
                return false
            end
            month:num
            day:num
            year:num
            month = parts[0].(num)
            day = parts[1].(num)
            year = parts[2].(num)
            if month < 1 or month > 12
                return false
            end
            if month in [1 3 5 7 8 10 12] and (day < 1 or day > 31)
                return false
            end
            if month in [4 6 9 11] and (day < 1 or day > 30)
                return false
            end
            if month == 2 and (day < 1 or day > 29)
                return false
            end
            date_valid = true
        catch
            date_valid = false
        end
        return date_valid
end
func check candidate:any
    assert true (candidate "03-11-2000")
    assert false (candidate "15-01-2012")
    assert false (candidate "04-0-2040")
    assert true (candidate "06-04-2020")
    assert true (candidate "01-01-2007")
    assert false (candidate "03-32-2011")
    assert false (candidate "")
    assert false (candidate "04-31-3000")
    assert true (candidate "06-06-2005")
    assert false (candidate "21-31-2000")
    assert true (candidate "04-12-2003")
    assert false (candidate "04122003")
    assert false (candidate "20030412")
    assert false (candidate "2003-04")
    assert false (candidate "2003-04-12")
    assert false (candidate "04-2003")
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
