func get_odd_collatz:[]num n:num
    if n % 2 == 0
        odd_collatz:[]num
    else
        odd_collatz := [n]
    end
    while n > 1
        if n % 2 == 0
            n = n / 2
        else
            n = n * 3 + 1
        end
        if n % 2 == 1
            odd_collatz = odd_collatz + [n]
        end
    end
    return sort odd_collatz
end
func check
    fails := 0
    total := 0
    func assert want:any got:any
        total = total + 1
        if want != got
            fails = fails + 1
            printf "This prints if this assert fails %v (good for debugging!)\n" want got
        end
    end
    assert [1 5 7 11 13 17] (get_odd_collatz 14)
    assert [1 5] (get_odd_collatz 5)
    assert [1 3 5] (get_odd_collatz 12)
    assert [1] (get_odd_collatz 1)
    printf "%v of %v tests passed\n" (total - fails) total
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
