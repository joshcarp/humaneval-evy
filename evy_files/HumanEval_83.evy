func starts_one_ends:num n:num
    if n == 1
        return 1
    end
    return 18 * (10 ** (n - 2))
end
func check
    fails := 0
    total := 0
    func assert want:any got:any
        total = total + 1
        if want != got
            fails = fails + 1
            printf "This prints if this assert fails %v (good for debugging!)\n" fails
        end
    end
    assert 1 (starts_one_ends 1)
    assert 18 (starts_one_ends 2)
    assert 180 (starts_one_ends 3)
    assert 1800 (starts_one_ends 4)
    assert 18000 (starts_one_ends 5)
    printf "%v of %v tests passed\n" (total - fails) total
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
