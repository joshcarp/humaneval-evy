func sum_squares: num lst: []num
    result: []num
        for i := range (len lst)
            if i % 3 == 0
                result = result + [lst[i] ** 2]
            else if i % 4 == 0 and i % 3 != 0
                result = result + [lst[i] ** 3]
            else
                result = result + [lst[i]]
            end
        end
        return sum result
end
func check candidate:any
    // Check some simple cases
    assert 6 (candidate [1 2 3])
    assert 14 (candidate [1 4 9])
    assert 0 (candidate [])
    assert 9 (candidate [1 1 1 1 1 1 1 1 1])
    assert -3 (candidate [-1 -1 -1 -1 -1 -1 -1 -1 -1])
    assert 0 (candidate [0])
    assert -126 (candidate [-1 -5 2 -1 -5])
    assert 3030 (candidate [-56 -99 1 0 -2])
    assert 0 (candidate [-1 0 0 0 0 0 0 0 -1])
    assert -14196 (candidate [-16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37])
    assert -1448 (candidate [-1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10])
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
