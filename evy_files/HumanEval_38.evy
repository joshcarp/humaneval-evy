func encodeCyclic:s:string s:string
    
        groups:[]string
        for i := range (len s + 2) / 3
            groups = groups + [s[(3 * i):min((3 * i + 3), len s)]]
        end
        for i := range len groups
            if len groups[i] == 3
                groups[i] = groups[i][1:] + groups[i][0]
            end
        end
        return join groups ""
    end
    
    func decodeCyclic:s:string s:string
        return encodeCyclic encodeCyclic s
    end
end
func check
candidate:any
    letters := "abcdefghijklmnopqrstuvwxyz"
    for _ := range 100
        str:string
        for i := range randint 10 20
            str = str + letters[randint 0 (len letters) - 1]
        end
        encodedStr := encodeCyclic str
        assert str (candidate encodedStr)
    end
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
