func solve:string s:string
    flg := 0
    idx := 0
    new_str:[]string
    for i := range (len s)
        if (s[i].isalpha)
            new_str = new_str + [s[i].swapcase]
            flg = 1
        else
            new_str = new_str + [s[i]]
        end
    end
    s := ""
    for i := range (len new_str)
        s = s + new_str[i]
    end
    if flg == 0
        s = s[::-1]
    end
    return s
end
func check
    fails := 0
total := 0
func assert want:any got:any
total = total + 1
if want != got
fails = fails + 1
printf "want != got: want %v got %v\n" want got
end
end
assert "aSdF" (solve "AsDf")
assert "4321" (solve "1234")
assert "AB" (solve "ab")
assert "#A@c" (solve "#a@C")
assert "#aSDFw^45" (solve "#AsdfW^45")
assert "2@6#" (solve "#6@2")
assert "#$A^d" (solve "#$a^D")
assert "#CCC" (solve "#ccc")
printf "%v of %v tests passed\n" (total - fails) total
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
