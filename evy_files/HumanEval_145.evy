func orderByPoints:[]num nums:[]num
    func digitsSum:num n:num
        neg := 1
        if n < 0
            n = -1 * n
            neg = -1
        end
        nStr := sprintf "%v" n
        nArr:[]num
        for i := range (len nStr)
            nArr = nArr + [num(nStr[i])]
        end
        nArr[0] = nArr[0] * neg
        return sum nArr
    end
    
    return sort nums (func(a:num b:num):num
        aSum := digitsSum a
        bSum := digitsSum b
        if aSum < bSum
            return -1
        else if aSum > bSum
            return 1
        end
        return 0
    end)
end
func check
    fails := 0
    total := 0

    func assert want:any got:any
        total = total + 1
        if want != got
            fails = fails + 1
            printf "want != got: want %v got %v\n" want got
        end
    end

    assert [-1 -11 1 -12 11] (orderByPoints [1 11 -1 -11 -12])
    assert [0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457] (orderByPoints [1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46])
    assert [] (orderByPoints [])
    assert [-3 -32 -98 -11 1 2 43 54] (orderByPoints [1 -11 -32 43 54 -98 2 -3])
    assert [1 10 2 11 3 4 5 6 7 8 9] (orderByPoints [1 2 3 4 5 6 7 8 9 10 11])
    assert [-76 -21 0 4 23 6 6] (orderByPoints [0 6 6 -76 -21 23 4])

    printf "%v of %v tests passed\n" (total - fails) total
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
