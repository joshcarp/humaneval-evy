func minPath:[]num grid:[][]num k:num
    n := len grid
    val := n * n + 1
    for i := range n
        for j := range n
            if grid[i][j] == 1
                temp:[]num
                if i != 0
                    temp = temp + [grid[i - 1][j]]
                end
                if j != 0
                    temp = temp + [grid[i][j - 1]]
                end
                if i != n - 1
                    temp = temp + [grid[i + 1][j]]
                end
                if j != n - 1
                    temp = temp + [grid[i][j + 1]]
                end
                val = min temp
            end
        end
    end
    ans:[]num
    for i := range k
        if i % 2 == 0
            ans = ans + [1]
        else
            ans = ans + [val]
        end
    end
    return ans
end
func check candidate:any
    assert [1 2 1] (candidate [[1 2 3] [4 5 6] [7 8 9]] 3)
    assert [1] (candidate [[5 9 3] [4 1 6] [7 8 2]] 1)
    assert [1 2 1 2] (candidate [[1 2 3 4] [5 6 7 8] [9 10 11 12] [13 14 15 16]] 4)
    assert [1 10 1 10 1 10 1] (candidate [[6 4 13 10] [5 7 12 1] [3 16 11 15] [8 14 9 2]] 7)
    assert [1 7 1 7 1] (candidate [[8 14 9 2] [6 4 13 15] [5 7 1 12] [3 10 11 16]] 5)
    assert [1 6 1 6 1 6 1 6 1] (candidate [[11 8 7 2] [5 16 14 4] [9 3 15 6] [12 13 10 1]] 9)
    assert [1 6 1 6 1 6 1 6 1 6 1 6] (candidate [[12 13 10 1] [9 3 15 6] [5 16 14 4] [11 8 7 2]] 12)
    assert [1 3 1 3 1 3 1 3] (candidate [[2 7 4] [3 1 5] [6 8 9]] 8)
    assert [1 5 1 5 1 5 1 5] (candidate [[6 1 5] [3 8 9] [2 7 4]] 8)
    assert [1 2 1 2 1 2 1 2 1 2] (candidate [[1 2] [3 4]] 10)
    assert [1 3 1 3 1 3 1 3 1 3] (candidate [[1 3] [3 2]] 10)
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
