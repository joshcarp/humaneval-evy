func get_row:[]any lst:[][]any x:any
    coords:[]any
        for i := range (len lst)
            for j := range (len lst[i])
                if lst[i][j] == x
                    coords = coords + [[i j]]
                end
            end
        end
        coords = sort coords by [0] then by [1] desc
        return coords
end
func check candidate:any
    assert [[0 0] [1 4] [1 0] [2 5] [2 0]] (candidate [[1 2 3 4 5 6] [1 2 3 4 1 6] [1 2 3 4 5 1]] 1)
    assert [[0 1] [1 1] [2 1] [3 1] [4 1] [5 1]] (candidate [[1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6]] 2)
    assert [[0 0] [1 0] [2 1] [2 0] [3 2] [3 0] [4 3] [4 0] [5 4] [5 0] [6 5] [6 0]] (candidate [[1 2 3 4 5 6] [1 2 3 4 5 6] [1 1 3 4 5 6] [1 2 1 4 5 6] [1 2 3 1 5 6] [1 2 3 4 1 6] [1 2 3 4 5 1]] 1)
    assert [] (candidate [] 1)
    assert [] (candidate [[1]] 2)
    assert [[2 2]] (candidate [[[] [1] [1 2 3]]] 3)
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
