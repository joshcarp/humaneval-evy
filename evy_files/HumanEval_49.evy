func modp:num n:num p:num
    ret := 1
    for i := range n
        ret = (2 * ret) % p
    end
    return ret
end
func check
    fails := 0
total := 0

func assert want:any got:any
total = total + 1
if want != got
fails = fails + 1
printf "want != got: want %v got %v\n" want got
end
end

// -- Test Cases Start -- //
assert 3 (modp 3 5)
assert 2 (modp 1101 101)
assert 1 (modp 0 101)
assert 8 (modp 3 11)
assert 1 (modp 100 101)
assert 4 (modp 30 5)
assert 3 (modp 31 5)
// -- Test Cases End -- //

printf "%v of %v tests passed\n" (total - fails) total
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
