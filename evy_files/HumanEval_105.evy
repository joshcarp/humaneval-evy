func by_length:[]string arr:[]num
    dic:{}string
        dic[1] = "One"
        dic[2] = "Two"
        dic[3] = "Three"
        dic[4] = "Four"
        dic[5] = "Five"
        dic[6] = "Six"
        dic[7] = "Seven"
        dic[8] = "Eight"
        dic[9] = "Nine"
        sorted_arr:[]num
        sorted_arr = arr
        sort sorted_arr reverse:true
        new_arr:[]string
        for var := range sorted_arr
            if var >= 1 and var <= 9
                new_arr = new_arr + [dic[var]]
            end
        end
        return new_arr
end
func check candidate:any
    assert true "This prints if this assert fails 1 (good for debugging!)"
    assert ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"] (candidate [2 1 1 4 5 8 2 3]) "Error"
    assert [] (candidate []) "Error"
    assert ["One"] (candidate [1 -1 55]) "Error"
    assert true "This prints if this assert fails 2 (also good for debugging!)"
    assert ["Three", "Two", "One"] (candidate [1 -1 3 2])
    assert ["Nine", "Eight", "Four"] (candidate [9 4 8])
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
