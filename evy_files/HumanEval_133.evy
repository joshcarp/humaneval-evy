func sum_squares: num lst: []num
    squared := 0
        for i := range lst
            squared = squared + ceil(lst[i])^2
        end
        return squared
end
func check candidate:any
    fails := 0
    total := 0

    func assert want:any got:any
        total = total + 1
        if want != got
            fails = fails + 1
            printf "This prints if this assert fails %v (good for debugging!)\n" want got
        end
    end

    assert 14 (candidate [1 2 3])
    assert 14 (candidate [1.0 2 3])
    assert 84 (candidate [1 3 5 7])
    assert 29 (candidate [1.4 4.2 0])
    assert 6 (candidate [-2.4 1 1])
    assert 10230 (candidate [100 1 15 2])
    assert 200000000 (candidate [10000 10000])
    assert 75 (candidate [-1.4 4.6 6.3])
    assert 1086 (candidate [-1.4 17.9 18.9 19.9])
    assert 0 (candidate [0])
    assert 1 (candidate [-1])
    assert 2 (candidate [-1 1 0])

    printf "%v of %v tests passed\n" (total - fails) total
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
