func tri:[]num n:num
    if n == 0
        return [1]
    end
    my_tri:[]num
    my_tri = [1 3]
    for i := range 2 (n + 1)
        if i % 2 == 0
            my_tri = my_tri + [i / 2 + 1]
        else
            my_tri = my_tri + [my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2]
        end
    end
    return my_tri
end
func check candidate:any
    assert [1 3 2.0 8.0] (candidate 3)
    assert [1 3 2.0 8.0 3.0] (candidate 4)
    assert [1 3 2.0 8.0 3.0 15.0] (candidate 5)
    assert [1 3 2.0 8.0 3.0 15.0 4.0] (candidate 6)
    assert [1 3 2.0 8.0 3.0 15.0 4.0 24.0] (candidate 7)
    assert [1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0] (candidate 8)
    assert [1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0] (candidate 9)
    assert [1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0 9.0 99.0 10.0 120.0 11.0] (candidate 20)
    assert [1] (candidate 0)
    assert [1 3] (candidate 1)
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
