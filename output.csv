"HumanEval_8.evy","func sum_product:[]num numbers:[]num
    sum_value := 0
    prod_value := 1
    for number := range numbers
        sum_value = sum_value + number
        prod_value = prod_value * number
    end
    return [sum_value prod_value]
end
func check
    assert [0 1] (sum_product [])
    assert [3 1] (sum_product [1 1 1])
    assert [100 0] (sum_product [100 0])
    assert [15 105] (sum_product [3 5 7])
    assert [10 10] (sum_product [10])
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if (sprintf ""%v"" want) != (sprintf ""%v"" got)
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished
"
"HumanEval_9.evy","func rolling_max:[]num numbers:[]num
    if numbers == []
        return []
    end
    running_max := numbers[0]
    result:[]num
    for number := range numbers
        if number > running_max
            running_max = number
        end
        result = result + [running_max]
    end
    return result
end
func check
    assert [] (rolling_max [])
    assert [1 2 3 4] (rolling_max [1 2 3 4])
    assert [4 4 4 4] (rolling_max [4 3 2 1])
    assert [3 3 3 100 100] (rolling_max [3 2 3 100 3])
end
func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if (sprintf ""%v"" want) != (sprintf ""%v"" got)
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished
"
"HumanEval_11.evy","func string_xor:string a:string b:string
    res:string
    for i := range (len a)
        if a[i] == b[i]
            res = res + ""0""
        else
            res = res + ""1""
        end
    end
    return res
end
func check
    assert ""010010"" (string_xor ""111000"" ""101010"")
    assert ""0"" (string_xor ""1"" ""1"")
    assert ""0101"" (string_xor ""0101"" ""0000"")
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if (sprintf ""%v"" want) != (sprintf ""%v"" got)
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished
"
"HumanEval_4.evy","func mean_absolute_deviation:num numbers:[]num
    mean := (sum numbers) / (len numbers)
    stdev := 0
    for number := range numbers
        stdev = stdev + (abs (number - mean))
    end
    return stdev / (len numbers)
end
func check
    assert true ((abs ((mean_absolute_deviation [1.0 2.0 3.0]) - 2.0 / 3.0))< 0.000001)
    assert true ((abs ((mean_absolute_deviation [1.0 2.0 3.0 4.0]) - 1.0))< 0.000001)
    assert true ((abs ((mean_absolute_deviation [1.0 2.0 3.0 4.0 5.0]) - 6.0 / 5.0) )< 0.000001)
end
func sum:num numbers:[]num
    total := 0
    for number := range numbers
        total = total + number
    end
    return total
end
func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished"
"HumanEval_5.evy","func intersperse:[]num numbers:[]num delimeter:num
    if (len numbers) == 0
        return []
    end
    result:[]num
    for number := range numbers[:-1]
        result = result + [number] + [delimeter]
    end
    result = result + [numbers[-1]]
    return result
end
func check
    assert [] (intersperse [] 7)
    assert [5 8 6 8 3 8 2] (intersperse [5 6 3 2] 8)
    assert [2 2 2 2 2] (intersperse [2 2 2] 2)
end
func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if (sprintf ""%v"" want) != (sprintf ""%v"" got)
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished
"
"HumanEval_10.evy","func is_palindrome:bool str:string
    return str == (reverse str)
end
func make_palindrome:string str:string
    if str == """"
        return """"
    end
    beginning_of_suffix := 0
    while !(is_palindrome str[beginning_of_suffix:])
        beginning_of_suffix = beginning_of_suffix + 1
    end
    return str + (reverse str[:beginning_of_suffix])
end
func reverse:string str:string
    reversed := """"
    for i := range(len str)
        reversed = str[i] + reversed
    end
    return reversed
end
func check
    assert """" (make_palindrome """")
    assert ""x"" (make_palindrome ""x"")
    assert ""xyzyx"" (make_palindrome ""xyz"")
    assert ""xyx"" (make_palindrome ""xyx"")
    assert ""jerryrrej"" (make_palindrome ""jerry"")
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if (sprintf ""%v"" want) != (sprintf ""%v"" got)
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished
"
"HumanEval_12.evy","func longest:string strings:[]string
  if (len strings) == 0 
    return ""null""
  end
  maxlen := 0
  for s := range strings
    if (len s) > maxlen
      maxlen = (len s)
    end
  end
  for s := range strings
    if (len s) == maxlen
      return s
    end
  end
  return ""null""
end
func check
    assert (longest [])  ""null""
    assert (longest [""x"" ""y"" ""z""])  ""x""
    assert (longest [""x"" ""yyy"" ""zzzz"" ""www"" ""kkkk"" ""abc""])  ""zzzz""
end
func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if (sprintf ""%v"" want) != (sprintf ""%v"" got)
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished
"
"HumanEval_7.evy","func filter_by_substring:[]string strings:[]string substring:string
    ans: []string
    for str := range strings
        if (contains str substring)
            ans = ans + [str]
        end
    end
    return ans
end
func check
    assert [] (filter_by_substring [] ""john"")
    assert [""xxx"" ""xxxAAA"" ""xxx""] (filter_by_substring [""xxx"" ""asd"" ""xxy"" ""john doe"" ""xxxAAA"" ""xxx""] ""xxx"")
    assert [""xxx"" ""aaaxxy"" ""xxxAAA"" ""xxx""] (filter_by_substring [""xxx"" ""asd"" ""aaaxxy"" ""john doe"" ""xxxAAA"" ""xxx""] ""xx"")
    assert [""grunt"" ""prune""] (filter_by_substring [""grunt"" ""trumpet"" ""prune"" ""gruesome""] ""run"")
end
func contains:bool haystack:string needle:string
    for i := range ((len haystack) - (len needle) + 1)
        if haystack[i:i + (len needle)] == needle
            return true
        end
    end
    return false
end
func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if (sprintf ""%v"" want) != (sprintf ""%v"" got)
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished
"
"HumanEval_6.evy","func parse_paren_group:num s:string
    depth:num
    max_depth:num
    for c := range s
        if c == ""(""
            depth = depth + 1
            max_depth = max depth max_depth
        else
            depth = depth - 1
        end
    end
    return max_depth
end
func parse_nested_parens:[]num paren_string:string
    result:[]num
    for x := range (split paren_string "" "")
        if x != """"
            result = result + [(parse_paren_group x)]
        end
    end
    return result
end
func check
    assert [2 3 1 3] (parse_nested_parens ""(()()) ((())) () ((())()())"")
    assert [1 2 3 4] (parse_nested_parens ""() (()) ((())) (((())))"")
    assert [4] (parse_nested_parens ""(()(())((())))"")
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if (sprintf ""%v"" want) != (sprintf ""%v"" got)
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished
"
"HumanEval_13.evy","func greatest_common_divisor:num a:num b:num
    while b != 0
        tmp := a
        a = b
        b = tmp % b
    end
    return a
end
func check
    assert 1 (greatest_common_divisor 3 7)
    assert 5 (greatest_common_divisor 10 15)
    assert 7 (greatest_common_divisor 49 14)
    assert 12 (greatest_common_divisor 144 60)
end
func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if (sprintf ""%v"" want) != (sprintf ""%v"" got)
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished
"
"HumanEval_2.evy","func truncateNumber:num number:num
    return number % 1.0
end
func check
    assert 0.5 (truncateNumber 3.5)
    assert true (((abs (truncateNumber (1.33 - 0.33)))<0.000001))
    assert true (((abs (truncateNumber (123.456 - 0.456)))<0.000001))
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished
"
"HumanEval_3.evy","func below_zero:bool operations:[]num
    balance := 0
    
    for op := range (len operations)
        balance = balance + operations[op]
        if balance < 0
            return true
        end
    end
    
    return false
end
func check
    assert false (below_zero [])
    assert false (below_zero [1 2 -3 1 2 -3])
    assert true (below_zero [1 2 -4 5 6])
    assert false (below_zero [1 -1 2 -2 5 -5 4 -4])
    assert true (below_zero [1 -1 2 -2 5 -5 4 -5])
    assert true (below_zero [1 -2 2 -2 5 -5 4 -4])
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished
"
"HumanEval_14.evy","func all_prefixes:[]string str:string
    result:[]string
    for i := range (len str)
        result = result + [str[:i+1]]
    end
    return result
end
func check
    assert [] (all_prefixes """")
    assert [""a"" ""as"" ""asd"" ""asdf"" ""asdfg"" ""asdfgh""] (all_prefixes ""asdfgh"")
    assert [""W"" ""WW"" ""WWW""] (all_prefixes ""WWW"")
end
func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if (sprintf ""%v"" want) != (sprintf ""%v"" got)
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished
"
"HumanEval_1.evy","func separate_paren_groups:[]string paren_string:string
    result:[]string
        current_string:string
        current_depth:num
        current_depth = 0
    
        for c := range (len paren_string)
            if paren_string[c] == ""(""
                current_depth = current_depth + 1
                current_string = current_string + paren_string[c]
            else if paren_string[c] == "")""
                current_depth = current_depth - 1
                current_string = current_string + paren_string[c]
    
                if current_depth == 0
                    result = result + [current_string]
                    current_string = """"
                end
            end
        end
    
        return result
end
func check
    assert [""(()())"" ""((()))"" ""()"" ""((())()())""] (separate_paren_groups ""(()()) ((())) () ((())()())"")
    assert [""()"" ""(())"" ""((()))"" ""(((())))""] (separate_paren_groups ""() (()) ((())) (((())))"")
    assert [""(()(())((())))""] (separate_paren_groups ""(()(())((())))"")
    assert [""()"" ""(())"" ""(()())""] (separate_paren_groups ""( ) (( )) (( )( ))"")
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished
"
"HumanEval_0.evy","func has_close_elements:bool numbers:[]num threshold:num
    for idx := range (len numbers)
        for idx2 := range (len numbers)
            if idx != idx2
                distance := abs ( numbers[idx] - numbers[idx2])
                if distance < threshold
                    return true
                end
            end
        end
    end
    return false
end
func check
    assert true (has_close_elements [1.0 2.0 3.9 4.0 5.0 2.2] 0.3)
    assert false (has_close_elements [1.0 2.0 3.9 4.0 5.0 2.2] 0.05)
    assert true (has_close_elements [1.0 2.0 5.9 4.0 5.0] 0.95)
    assert false (has_close_elements [1.0 2.0 5.9 4.0 5.0] 0.8)
    assert true (has_close_elements [1.0 2.0 3.0 4.0 5.0 2.0] 0.1)
    assert true (has_close_elements [1.1 2.2 3.1 4.1 5.1] 1.0)
    assert false (has_close_elements [1.1 2.2 3.1 4.1 5.1] 0.5)
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf ""want != got: want %v got %v\n"" want got
    end
end
func finished
    printf ""%v of %v tests passed\n"" (total - fails) total
end
check
finished
"
