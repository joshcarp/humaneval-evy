// Comments
// Single-line comments start with //

// Declarations and Assignments
varName := value // Type inference
varName num = value // Explicit type declaration
varName = value // Assignment
varName: num // declaration with type
varName: string
varName: bool
varName: any

// Data Types
num // Numeric type
string // String type
bool // Boolean type
any // Dynamic type
[]dataType // Array type
{}dataType // Map type

// Expressions
// Arithmetic and boolean expressions supported
// String operations include concatenation, slicing, and indexing

// Control Structures
if condition
    // code block
else if secondcondition
    // code block
else
    // code block
end


while condition
    // code block
end

for x := range 5
    print x           // 0 1 2 3 4
end

for x := range 5 10
    print x           // 5 6 7 8 9
end

for x := range 1 10 2 // from to step
    print x           // 1 3 5 7 9
end

for x := range -10
    print x        // nothing. step is 1 by default.
end

// Functions
func functionName:returnType parameterName:parametertype parameter2name:parametertype
    // code block
end

// Variadic functions
func functionName:returnType parameterName...params
    // code block
end

// Function calls
functionName arg1 arg2 ...

// Arrays
// Declared with [] and can be nested
arrayName: []num
arrayName := [value1, value2]

// Maps
// Declared with {} and store key-value pairs
mapName: {}num
mapName = {key1: value1 key2: value2}

// Type System
any // Dynamic typing
// Type assertion and reflection are supported

// Event Handling
on event
    // code block
end

// Parentheses
// Parentheses are used for grouping and function calls
abs ( var1 - var2) // need parentheses to bind operation


// Whitespace and Syntax Rules
// Horizontal whitespace is significant for separation
// Whitespace is not allowed around certain operators
// Whitespace is optional around binary operators for readability