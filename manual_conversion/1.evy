// Input to this function is a string containing multiple groups of nested
// parentheses. Your goal is to separate those group into separate strings
// and return the list of those. Separate groups are balanced (each open
// brace is properly closed) and not nested within each other Ignore any
// spaces in the input string.
//
//    separate_paren_groups "( ) (( )) (( )( ))"
//    // ["()" "(())" "(()())"]
//
func separate_paren_groups:[]string paren_string:string
    result:[]string
    current_string:string
    current_depth:num
    current_depth = 0

    for c := range (len paren_string)
        if paren_string[c] == "("
            current_depth = current_depth + 1
            current_string = current_string + paren_string[c]
        else if paren_string[c] == ")"
            current_depth = current_depth - 1
            current_string = current_string + paren_string[c]

            if current_depth == 0
                result = result + [current_string]
                current_string = ""
            end
        end
    end

    return result
end

func check
    assert ["(()())" "((()))" "()" "((())()())"] (separate_paren_groups "(()()) ((())) () ((())()())")
    assert ["()" "(())" "((()))" "(((())))"] (separate_paren_groups "() (()) ((())) (((())))")
    assert ["(()(())((())))"] (separate_paren_groups "(()(())((())))")
    assert ["()" "(())" "(()())"] (separate_paren_groups "( ) (( )) (( )( ))")
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end

func print_result
    printf "%v of %v tests passed\n" (total - fails) total
end

check
print_result
