// Filter an input list of strings only for ones that contain given substring
// filter_by_substring [] "a" // []
// filter_by_substring ["abc" "bacd" "cde" "array"] "a"  // ["abc" "bacd" "array"]
func filter_by_substring:[]string strings:[]string substring:string
    ans:[]string
    for str := range strings
        if (contains str substring)
            ans = ans + [str]
        end
    end
    return ans
end

func contains:bool haystack:string needle:string
    for i := range ((len haystack) - (len needle) + 1)
        if haystack[i:i + (len needle)] == needle
            return true
        end
    end
    return false
end

func check
    assert 0 (len (filter_by_substring [] "john"))
    assert ["xxx" "xxxAAA" "xxx"] (filter_by_substring ["xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx"] "xxx")
    assert ["xxx" "aaaxxy" "xxxAAA" "xxx"] (filter_by_substring ["xxx" "asd" "aaaxxy" "john doe" "xxxAAA" "xxx"] "xx")
    assert ["grunt" "prune"] (filter_by_substring ["grunt" "trumpet" "prune" "gruesome"] "run")
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end

func print_result
    printf "%v of %v tests passed\n" (total - fails) total
end

check
print_result
