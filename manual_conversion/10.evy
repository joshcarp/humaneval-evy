// Test if given string is a palindrome
func is_palindrome:bool str:string
    return str == (reverse str)
end

// Find the shortest palindrome that begins with a supplied string.
// Algorithm idea is simple:
// - Find the longest postfix of supplied string that is a palindrome.
// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
//
//    make_palindrome("") // ""
//    make_palindrome("cat") // "catac"
//    make_palindrome("cata") // "catac"
func make_palindrome:string str:string
    if str == ""
        return ""
    end
    beginning_of_suffix := 0
    while !(is_palindrome str[beginning_of_suffix:])
        beginning_of_suffix = beginning_of_suffix + 1
    end
    return str + (reverse str[:beginning_of_suffix])
end

func reverse:string str:string
    reversed := ""
    for i := range (len str)
        reversed = str[i] + reversed
    end
    return reversed
end

func check
    assert "" (make_palindrome "")
    assert "x" (make_palindrome "x")
    assert "xyzyx" (make_palindrome "xyz")
    assert "xyx" (make_palindrome "xyx")
    assert "catac" (make_palindrome "cata")
    assert "jerryrrej" (make_palindrome "jerry")
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end

func print_result
    printf "%v of %v tests passed\n" (total - fails) total
end

check
print_result
