// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
// Empty sum should be equal to 0 and empty product should be equal to 1.
// sum_product [] // [0 1]
// sum_product [1 2 3 4] // [10 24]
func rolling_max:[]num numbers:[]num
    if numbers == []
        return []
    end
    running_max := numbers[0]
    result:[]num
    for number := range numbers
        if number > running_max
            running_max = number
        end
        result = result + [running_max]
    end
    return result
end

func test
    assert [] (rolling_max [])
    assert [1 2 3 4] (rolling_max [1 2 3 4])
    assert [4 4 4 4] (rolling_max [4 3 2 1])
    assert [3 3 3 100 100] (rolling_max [3 2 3 100 3])
end

// Test boilerplate
fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want == got
        return
    end
    wantType := (typeof want)[:2]
    gotType := (typeof got)[:2]
    if (wantType == "[]" or wantType == "{}") and wantType == gotType and (len want) == 0 and (len got) == 0
        return
    end
    fails = fails + 1
    printf "want != got:\n want: %v\n got:  %v\n" want got
end

func print_result
    printf "%2.f of %2.f tests passed\n" (total - fails) total
end

test
print_result
