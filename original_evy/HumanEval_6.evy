func parse_paren_group:num s:string
    depth:num
    max_depth:num
    for c := range s
        if c == "("
            depth = depth + 1
            max_depth = max depth max_depth
        else
            depth = depth - 1
        end
    end
    return max_depth
end
func parse_nested_parens:[]num paren_string:string
    result:[]num
    for x := range (split paren_string " ")
        if x != ""
            result = result + [(parse_paren_group x)]
        end
    end
    return result
end
func check
    assert [2 3 1 3] (parse_nested_parens "(()()) ((())) () ((())()())")
    assert [1 2 3 4] (parse_nested_parens "() (()) ((())) (((())))")
    assert [4] (parse_nested_parens "(()(())((())))")
end

func abs:num x:num
    if x < 0
        return -x
    end
    return x
end
fails := 0
total := 0
func assert want:any got:any
    total = total + 1
    if (sprintf "%v" want) != (sprintf "%v" got)
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end
func finished
    printf "%v of %v tests passed\n" (total - fails) total
end
check
finished
